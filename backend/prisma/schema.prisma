// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  tasks     Task[]
  goals     Goal[]
  notes     Note[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Task {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id] , onDelete:Cascade)
  title       String
  description String
  status      Status
  priority    Priority
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  GoalTask    GoalTask[]
  Session     Session[]
}

model Goal {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id] , onDelete: Cascade)
  title       String
  description String?
  targetDate  DateTime?
  progress    Float?     @default(0.0)
  goalTask    GoalTask[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model GoalTask {
  id     Int  @id @default(autoincrement())
  goalId Int
  goal   Goal @relation(fields: [goalId], references: [id] , onDelete: Cascade)
  taskId Int
  task   Task @relation(fields: [taskId], references: [id] ,onDelete: Cascade)
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  title     String
  content   String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        Int       @id @default(autoincrement())
  User      User?     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int?
  startTime DateTime
  endTime   DateTime?
  totalTime Int?
  task      Task      @relation(fields: [taskId], references: [id],onDelete: Cascade)
  taskId    Int
  createdAt DateTime  @default(now())
}

enum Status {
  to_do
  in_progress
  completed
}

enum Priority {
  low
  medium
  high
}
